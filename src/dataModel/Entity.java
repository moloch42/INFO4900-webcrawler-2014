package dataModel;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import modules.Logger;

//TODO update this javadoc
/**
* @author Unknown
*/
public abstract class Entity {

    private State state;

    /**
     * @return The state of this Entity
     */
    public State getState() {
        return state;
    }

    /**
     * @param state The new state of this Entity
     */
    protected void setState(State state) {
        this.state = state;
    }

    protected enum State {
        added,
        modified,
        deleted,
        unchanged;
    }

    protected Entity() {
        setState(State.added);
    }

    /**
     * @param pConn The connection that will be used when loading this entity
     * @param pintEntityID The id of the entity to be loaded
     * @param pblnIsLoadRecursive true if the entities related to this entity should also be loaded
     */
    protected Entity(Connection pConn, int pintEntityID, boolean pblnIsLoadRecursive) {
        this.load(pConn, pintEntityID, pblnIsLoadRecursive);
        setState(State.unchanged);
    }

    /**
     * @param pConn The connection that will be used when loading this entity
     * @param pintEntityID The id of the entity to be loaded
     * @param pblnIsLoadRecursive true if the entities related to this entity should also be loaded
     */
    public abstract void load(Connection pConn, int pintEntityID, boolean pblnIsLoadRecursive);

    //protected abstract void loadReferences(java.sql.Connection pConn);

    /**
     * @param pConn The connection that will be used when saving this entity
     * @return Unknown
     */
    public int save(Connection pConn) {
        int intResult = 0;
        switch (state) {
        case added:
            intResult += insert(pConn);
            break;
        case modified:
            intResult += update(pConn);
            break;
        case deleted:
            intResult += delete(pConn);
            break;
        case unchanged:
        }
        return intResult + saveReferences(pConn);
    }

    /**
     * @param pConn The connection that will be used when saving this entity
     * @return Unknown
     */
    protected abstract int saveReferences(Connection pConn);

    /**
     * @param pConn The connection that will be used when saving this entity
     * @return Unknown
     */
    protected abstract int update(Connection pConn);

    /**
     * @param pConn The connection that will be used when saving this entity
     * @return Unknown
     */
    protected abstract int insert(Connection pConn);

    /**
     * @param pConn The connection that will be used when deleting this entity
     * @return Unknown
     */
    protected abstract int delete(Connection pConn);

//    /**
//     * @param pConn The connection that will be used when executing this query
//     * @param strStatement The SQL to be executed
//     * @return The SQL ResultSet from the query. Null if an exception occurred.
//     */
//    protected ResultSet executeQuery(Connection pConn, String strStatement) {
//
//        try (Statement stmtNew = pConn.createStatement();
//        		) {
//        	return stmtNew.executeQuery(strStatement);
//
//        } catch (Exception e) {
//        	Logger.error("An error occured while executing the SQL Query: '" + strStatement + "'", e);
//        }
//        return null;
//    }

    /**
     * @param pConn The connection that will be used when executing this query
     * @param strStatement  The SQL to be executed
     * @return The key generated by this insert
     */
    protected int executeInsert(Connection pConn, String strStatement) {
    	
        ResultSet rsGenKeys = null;
        int intGenKey = 0;
        try (Statement stmtNew = pConn.createStatement();) {
            stmtNew.executeUpdate(strStatement, Statement.RETURN_GENERATED_KEYS);
            rsGenKeys = stmtNew.getGeneratedKeys();

            if (rsGenKeys.first()) {
                intGenKey = rsGenKeys.getInt(1);
            }
        } catch (Exception e) {
        	Logger.error("An error occured while executing the SQL Insert: '" + strStatement + "'", e);
        } finally {
            try {
                if (rsGenKeys != null) {
                    rsGenKeys.close();
                }
            } catch (SQLException e) {
            	Logger.error("An error occured while cleaning up after the SQL Insert: '" + strStatement + "'", e);
            }
        }
        return intGenKey;
    }

    /**
     * @param pConn The connection that will be used when executing this query
     * @param strStatement The SQL to be executed
     * @return The number of rows affected
     */
    protected int executeUpdate(Connection pConn, String strStatement) {

        try (Statement stmtNew = pConn.createStatement()) {
        	
            return stmtNew.executeUpdate(strStatement);
            
        } catch (SQLException e) {
           Logger.error("An error occured while executing the SQL Update: '" + strStatement + "'", e);
        }
        
        return 0;
    }

    /**
     * @return A string representation of this entity.
     */
    @Override
    public String toString() {
        return "Entity:" + state.toString();
    }
}
